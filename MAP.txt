BFS


#include<bits/stdc++.h>

using namespace std;

int node,edge,mat[100][100];
char u,v;

int visit[100],dist[100];

void BFS(int source)
{
    queue<int> qq;
    qq.push(source);

    visit[source] =1;
    while(!qq.empty())
    {
        int currentNode = qq.front();
        for( int i=1; i<=node; i++ )
        {
            if( mat[currentNode][i] == 1 )
            {
                int nextNode = i;
                if( visit[nextNode] == 0 )
                {
                    dist[nextNode] = dist[currentNode] + 1 ;
                    visit[nextNode] = 1;
                    qq.push(nextNode);
                }
            }
        }
        qq.pop();
    }
    cout<<"For distance"<<endl;
    for( int i=1; i<=node; i++ )
    {
        cout<<i<<" "<<dist[i]<<"\n";
    }
    cout<<endl;
}

int main()
{
    cin>>node>>edge;
    map<char,int> mp;
    int k=1;
    for( int i=0; i<edge; i++)
    {
        cin>>u>>v;
        if( mp.find(u)  == mp.end() )
            mp[u] = k++;
        if( mp.find(v)  == mp.end() )
            mp[v] = k++;

        mat[mp[u]][mp[v]] = 1;
        mat[mp[v]][mp[u]] = 1;
    }

    for( auto x:mp)
        cout<<x.first<<" =>> "<<x.second<<endl;

    for( int i=1; i<=node; i++ )
    {
        for( int j=1; j<=node; j++ )
            cout<<mat[i][j]<<" ";
        cout<<endl;
    }
    BFS(1);
    return 0;
}


ADJACENCY MATRIX


#include<bits/stdc++.h>

using namespace std;
    int node,edge,mat[10][10],u,v;

int main()
{
    cin>>node>>edge;
    for( int i=0; i<edge; i++)
    {
        cin>>u>>v;
        mat[u][v] = 1;
        mat[v][u] = 1;
    }

    for( int i=1; i<=node; i++ )
    {
        for( int j=1; j<=node; j++ )
        {

            cout<<mat[i][j]<<" ";
        }
            cout<<"\n";

    }
}


LCS

#include <bits/stdc++.h>

using namespace std;

#define MAXC 10000

int lenA,lenB;
int dp[MAXC][MAXC];
bool visited[MAXC][MAXC];

string A,B;

int print_array(int a, int b)
{
    cout<<"visited array"<<endl;
    for( int i=0; i<a; i++ )
    {
        for( int j=0; j<b; j++ )
            cout<<visited[i][j]<<" ";
            cout<<endl;
    }
     cout<<"DP Array"<<endl;
    for( int i=0; i<a; i++ )
    {
        for( int j=0; j<b; j++ )
            cout<<dp[i][j]<<" ";
            cout<<endl;
    }
}

int LCS(int i,int j)
{
    if( i == lenA or j == lenB ) return 0;
    if( visited[i][j] ) return dp[i][j];

    int ans= 0;

    if( A[i] == B[j] ) ans = 1+LCS(i+1,j+1);
    else
    {
        int val1 = LCS(i+1,j);
        int val2 = LCS(i,j+1);
        ans = max(val1,val2);
    }
    visited[i][j] = 1;
    dp[i][j] =ans;
    return dp[i][j];
}

int main()
{

    print_array(10,10);
    cin>>A>>B;

    lenA = A.length();
    lenB = B.length();
    cout<<LCS(0,0)<<endl;

    print_array(10,10);
    return 0;
}
